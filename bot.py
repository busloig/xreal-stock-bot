import asyncio
import os
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- –ö–ù–û–ü–ö–ê ---
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ")]
    ],
    resize_keyboard=True
)

# --- –ü–†–û–í–ï–†–ö–ê ---
async def check_availability():
    results = []
    async with aiohttp.ClientSession() as session:
        # EU –º–∞–≥–∞–∑–∏–Ω XREAL
        async with session.get("https://eu.shop.xreal.com/products/xreal-air-2-pro") as r:
            text = await r.text()
            results.append("‚úÖ XREAL EU: –í –Ω–∞–ª–∏—á–∏–∏" if "Add to cart" in text else "‚ùå XREAL EU: –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏")

        # Amazon NL (–ø—Ä–∏–º–µ—Ä ‚Äî –≤—Å—Ç–∞–≤—å —Å–≤–æ—é —Å—Å—ã–ª–∫—É)
        async with session.get("https://www.amazon.nl/dp/B0XXXXX") as r:
            text = await r.text()
            results.append("‚úÖ Amazon NL: –í –Ω–∞–ª–∏—á–∏–∏" if "Add to Cart" in text else "‚ùå Amazon NL: –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏")

        # Unbound XR (–ø—Ä–∏–º–µ—Ä ‚Äî –≤—Å—Ç–∞–≤—å —Å–≤–æ—é —Å—Å—ã–ª–∫—É)
        async with session.get("https://unboundxr.nl/xreal-one-pro-l") as r:
            text = await r.text()
            results.append("‚úÖ Unbound XR: –í –Ω–∞–ª–∏—á–∏–∏" if "In stock" in text else "‚ùå Unbound XR: –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏")

    return "\n".join(results)

# --- –•–ï–ù–î–õ–ï–†–´ ---
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ Xreal One Pro L.", reply_markup=keyboard)

@dp.message(lambda m: m.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ")
async def manual_check(message: types.Message):
    await message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ...", reply_markup=keyboard)
    result = await check_availability()
    await message.answer(result, reply_markup=keyboard)

@dp.message()
async def fallback(message: types.Message):
    await message.answer("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ Xreal One Pro L.", reply_markup=keyboard)

# --- –ó–ê–ü–£–°–ö ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
